from fastapi import FastAPI
import httpx
from datetime import datetime
from sqlalchemy.orm import Session
from .database import SessionLocal, engine, Base
from .models import Check
import json
from apscheduler.schedulers.background import BackgroundScheduler
from prometheus_fastapi_instrumentator import Instrumentator

app = FastAPI(title="Site Uptime Monitor")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º Prometheus –º–µ—Ç—Ä–∏–∫–∏
Instrumentator().instrument(app).expose(app)


def scheduled_check():
    try:
        with open("/app/sites.json") as f:
            sites = json.load(f)
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å sites.json: {e}")
        return

    for url in sites:
        db: Session = SessionLocal()
        try:
            start_time = datetime.now()
            with httpx.Client(timeout=5, follow_redirects=True) as client:
                response = client.get(url)
            response_time = (datetime.now() - start_time).total_seconds()

            check = Check(
                url=url,
                final_url=str(response.url),
                status_code=response.status_code,
                response_time=response_time,
                checked_at=datetime.now(),
                error=None
            )
            db.add(check)
            db.commit()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {url}: {e}")
            check = Check(
                url=url,
                final_url=None,
                status_code=None,
                response_time=None,
                checked_at=datetime.now(),
                error=str(e)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            )
            db.add(check)
            db.commit()
        finally:
            db.close()


@app.on_event("startup")
def on_startup():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    Base.metadata.create_all(bind=engine)
    scheduler = BackgroundScheduler()
    scheduler.add_job(scheduled_check, "interval", minutes=1)
    scheduler.start()
    print("üöÄ Site Uptime Monitor –∑–∞–ø—É—â–µ–Ω!")


@app.get("/")
def root():
    return {"message": "Site Uptime Monitor is running"}


@app.get("/check")
async def check_site(url: str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∞–π—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    db: Session = SessionLocal()
    try:
        start_time = datetime.now()
        async with httpx.AsyncClient(timeout=5, follow_redirects=True) as client:
            response = await client.get(url)
        response_time = (datetime.now() - start_time).total_seconds()

        check = Check(
            url=url,
            final_url=str(response.url),
            status_code=response.status_code,
            response_time=response_time,
            checked_at=datetime.now()
        )

        db.add(check)
        db.commit()
        db.refresh(check)

        return {
            "url": check.url,
            "final_url": check.final_url,
            "status_code": check.status_code,
            "response_time": check.response_time,
            "checked_at": check.checked_at
        }
    except Exception as e:
        return {"url": url, "error": str(e), "checked_at": datetime.now()}
    finally:
        db.close()


@app.get("/history")
def get_history():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
    db: Session = SessionLocal()
    try:
        checks = db.query(Check).order_by(Check.checked_at.desc()).all()
        return [
            {
                "id": check.id,
                "url": check.url,
                "final_url": check.final_url,
                "status_code": check.status_code,
                "response_time": check.response_time,
                "checked_at": check.checked_at
            }
            for check in checks
        ]
    finally:
        db.close()
